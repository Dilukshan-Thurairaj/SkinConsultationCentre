import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;


public class JFrame_Consultation implements ActionListener {
    //implements ActionListener
    int medLicenseNo;

    //New JFrame created
    JFrame frame = new JFrame();

    //Initializing buttons
    JButton bookBtn,costBtn,confirmBtn,cancelBtn;

    //JTextField and TextArea initialisation
    JTextField firstname,surname,dob,mobNo,patID,date,time,hour,cost;

    //Initializing textNote
    JTextArea textNote;

    JPanel consultInformation;
    selectedDocInformation tableModel;
    JScrollPane scrollPane;

    //Creating new consultation and patient variables;
    consultation consultation;
    patient patient;

    Encryption encryption;

    //Names of the columns
    String [] columnNames = {"Med-License No","Specialization","Firstname","Surname","Date of Birth","Mobile No"};

    //New arraylist of doctors created
    ArrayList<doctor> docTableList = new ArrayList<>();

    //Another array of doctors initialized
    ArrayList<doctor> doctorsList;

    //The selected doctor index is initialized
    int docIndex;

    //Constructor
    JFrame_Consultation(int medLicenseNo, ArrayList<doctor> docList){

        //storing the medLicenseNo passed to this class medLicenseNo variable
        this.medLicenseNo = medLicenseNo;

        //To get the index of the doctor in the arrayList with the medical license No that was clicked in the previous frame
        this.docIndex = selectedDocIndex(docList);

        //docTableList arrayList stores the object of the doctor selected for consultation
        this.docTableList.add(docList.get(docIndex));

        //storing the passed arraylist of doctors to this class
        this.doctorsList = docList;

        //Setting frame
        frame.setTitle("Westminster Skin Consultation");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setBackground(new Color(239,228,90));
        frame.setSize(850,800);
        frame.setLayout(new BorderLayout());
        frame.setLocationRelativeTo(null);


        //Creating table
        tableModel = new selectedDocInformation();
        JTable table = new JTable(tableModel);

        //Centering the elements in table
        DefaultTableCellRenderer centerRender = new DefaultTableCellRenderer();
        centerRender.setHorizontalAlignment(JLabel.CENTER);
        for (int i =0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(centerRender);
        }

        //setting table
        table.setRowHeight(95);
        table.setBackground(new Color(239,228,90));
        scrollPane = new JScrollPane(table);
        scrollPane.setPreferredSize(new Dimension(100,120));
        scrollPane.setBackground(new Color(239,228,90));

        //Patient Details
        firstname = new JTextField();
        firstname.setPreferredSize(new Dimension(200,30));

        JLabel fNameLabel = new JLabel();
        fNameLabel.setText("Enter your firstname: ");

        JPanel flow1 = new JPanel();
        flow1.setLayout(new FlowLayout());
        flow1.add(fNameLabel);
        flow1.add(firstname);


        surname = new JTextField();
        surname.setPreferredSize(new Dimension(200,30));

        JLabel sNameLabel = new JLabel();
        sNameLabel.setText("Enter your surname: ");

        JPanel flow2 = new JPanel();
        flow2.setLayout(new FlowLayout());
        flow2.add(sNameLabel);
        flow2.add(surname);


        dob = new JTextField();
        dob.setPreferredSize(new Dimension(200,30));

        JLabel dobLabel = new JLabel();
        dobLabel.setText("Enter your date of birth: ");

        JPanel flow3 = new JPanel();
        flow3.setLayout(new FlowLayout());
        flow3.add(dobLabel);
        flow3.add(dob);


        mobNo = new JTextField();
        mobNo.setPreferredSize(new Dimension(200,30));

        JLabel mobNoLabel = new JLabel();
        mobNoLabel.setText("Enter your mobile number: ");

        JPanel flow4 = new JPanel();
        flow4.setLayout(new FlowLayout());
        flow4.add(mobNoLabel);
        flow4.add(mobNo);


        patID = new JTextField();
        patID.setPreferredSize(new Dimension(230,30));
        patID.setEditable(false);
        patID.setText(setPatID());

        JLabel patIDLabel = new JLabel();
        patIDLabel.setText("Your patient ID (generated by the system): ");

        JPanel flow5 = new JPanel();
        flow5.setLayout(new FlowLayout());
        flow5.add(patIDLabel);
        flow5.add(patID);


        JPanel patInformation = new JPanel();
        patInformation.setLayout(new GridLayout(5,0));
        patInformation.setPreferredSize(new Dimension(300,100));
        patInformation.add(flow5);
        patInformation.add(flow1);
        patInformation.add(flow2);
        patInformation.add(flow3);
        patInformation.add(flow4);

        //Consultation
        date = new JTextField();
        date.setPreferredSize(new Dimension(200,30));

        JLabel dateLabel = new JLabel();
        dateLabel.setText("Enter the date to visit the doctor: ");

        JPanel dateFlow = new JPanel();
        dateFlow.setLayout(new FlowLayout());
        dateFlow.add(dateLabel);
        dateFlow.add(date);


        time = new JTextField();
        time.setPreferredSize(new Dimension(200,30));

        JLabel timeLabel = new JLabel();
        timeLabel.setText("Enter the time you would like visit the doctor(Enter in 24hrs format): ");

        JPanel timeFlow = new JPanel();
        timeFlow.setLayout(new FlowLayout());
        timeFlow.add(timeLabel);
        timeFlow.add(time);


        textNote = new JTextArea();
        JScrollPane textScroll = new JScrollPane(textNote,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        textScroll.setPreferredSize(new Dimension(300,80));

        JLabel textLabel = new JLabel();
        textLabel.setText("Add a note to the doctor: ");

        JPanel textFlow = new JPanel();
        textFlow.setLayout(new FlowLayout());
        textFlow.add(textLabel);
        textFlow.add(textScroll);


        hour = new JTextField();
        hour.setPreferredSize(new Dimension(200,30));

        JLabel hourLabel = new JLabel();
        hourLabel.setText("Enter the hours of consultation: ");

        JPanel hourFlow = new JPanel();
        hourFlow.setLayout(new FlowLayout());
        hourFlow.add(hourLabel);
        hourFlow.add(hour);


        cost = new JTextField();
        cost.setPreferredSize(new Dimension(100,30));
        cost.setEditable(false);


        JLabel costLabel = new JLabel();
        costLabel.setText("Your Total Cost for consultation (Click the button to output the cost): ");

        costBtn = new JButton("Calculate Cost");
        costBtn.setPreferredSize(new Dimension(120,40));
        costBtn.setFocusable(false);
        costBtn.addActionListener(this);

        JPanel costFlow = new JPanel();
        costFlow.setLayout(new FlowLayout());
        costFlow.add(costLabel);
        costFlow.add(cost);
        costFlow.add(costBtn);


        bookBtn = new JButton("Confirm Booking");
        bookBtn.setPreferredSize(new Dimension(150,50));
        bookBtn.setFocusable(false);
        bookBtn.addActionListener(this);

        JPanel flowBtn = new JPanel();
        flowBtn.setLayout(new FlowLayout());
        flowBtn.add(bookBtn);


        consultInformation = new JPanel();
        consultInformation.setLayout(new GridLayout(7,0));
        consultInformation.setPreferredSize(new Dimension(300,100));
        consultInformation.add(dateFlow);
        consultInformation.add(timeFlow);
        consultInformation.add(textFlow);
        consultInformation.add(hourFlow);
        consultInformation.add(costFlow);
        consultInformation.add(flowBtn);


        //Combining Patient Details and Consultation
        JLabel combine = new JLabel();
        combine.setLayout(new GridLayout(0,2));
        combine.setPreferredSize(new Dimension(300,300));

        combine.add(patInformation);
        combine.add(consultInformation);

        frame.add(combine,BorderLayout.CENTER);
        frame.add(scrollPane,BorderLayout.SOUTH);
        frame.setVisible(true);
    }

    public int selectedDocIndex(ArrayList<doctor> docList) {
        //Sending the index of the selected doctor in the previous frame
        int index = 0;
        for (int i = 0; i < docList.size(); i++) {
            if (medLicenseNo == docList.get(i).getMedLicenceNo()) {
                index = i;
            }
        }
        return index;
    }

    public String setPatID(){
        //Setting the unique patientID
        String patientID;
        JFrame_patientConsultation patientConsultation = new JFrame_patientConsultation();
        patientID = patientConsultation.patientID();
        return patientID;
    }


    @Override
    public void actionPerformed(ActionEvent e) {

        //If book btn is clicked
        if (e.getSource() == bookBtn) {
            //All the needed information should be there before confirming consultation
            if (firstname.getText().length() > 0 && surname.getText().length() > 0 && dob.getText().length() > 0 && mobNo.getText().length() > 0
                    && date.getText().length() > 0 && time.getText().length() > 0 && hour.getText().length() > 0 && textNote.getText().length() > 0) {

                //Creating an instance of the class where the TextFields are validated and patient and consultation instance created
                JFrame_patientConsultation patientConsultation = new JFrame_patientConsultation();

                //passing all the textField information to patient information method in patientConsultation class
                patientConsultation.patientInformation(patID.getText(), firstname.getText(), surname.getText(), dob.getText()
                        ,mobNo.getText(), date.getText(), time.getText(), hour.getText(), textNote.getText(), medLicenseNo, doctorsList);

                //Getting the confirmed consultation object created
                consultation = patientConsultation.getConsultationBooked();

                //Getting the confirmed patient object created
                patient = patientConsultation.getPatientBooked();

                //Getting the encryption key
                encryption = patientConsultation.getEncryption();

                try {
                    //If the consultation doctor is not available
                    if (consultation.getConsDocLicenseNo() != medLicenseNo) {

                        //Remove the existing table as doctor has been changed
                        frame.remove(scrollPane);
                        //clear the arraylist
                        docTableList.clear();

                        //Now the medLicenseNo is not what user selected but what system has selected for the user
                        medLicenseNo = consultation.getConsDocLicenseNo();

                        //get index of the doctor changed by the system
                        int index = selectedDocIndex(doctorsList);

                        //Now docTableList holds the information of the doctor changed
                        docTableList.add(doctorsList.get(index));

                        //New Table created with the changed doctor information
                        tableModel = new selectedDocInformation();
                        JTable table = new JTable(tableModel);
                        DefaultTableCellRenderer centerRender = new DefaultTableCellRenderer();
                        centerRender.setHorizontalAlignment(JLabel.CENTER);
                        for (int i =0; i < table.getColumnCount(); i++) {
                            table.getColumnModel().getColumn(i).setCellRenderer(centerRender);
                        }
                        table.setRowHeight(95);
                        table.setBackground(new Color(239,228,90));
                        scrollPane = new JScrollPane(table);
                        scrollPane.setPreferredSize(new Dimension(100,120));
                        scrollPane.setBackground(new Color(239,228,90));

                        //Adding the new table to frame
                        frame.add(scrollPane,BorderLayout.SOUTH);

                        //Prompt that the doctor has changed
                        JOptionPane.showMessageDialog(null,
                                "The doctor you want to consult is not available on the time entered\nNew doctor is added for you to consult on the time entered",
                                "Doctor Changed", JOptionPane.INFORMATION_MESSAGE);


                        //Asking for user choice to confirm consultation with the changed doctor, else cancel it.
                        JLabel availabilityLabel = new JLabel();
                        availabilityLabel.setText("Click 'confirm' button to book with the changed doctor," +
                                " else click 'cancel' button to cancel consultation");

                        JLabel doctorLabel = new JLabel();
                        doctorLabel.setText("Check the below doctor table and click the button of your choice");

                        confirmBtn = new JButton("Confirm");
                        confirmBtn.setPreferredSize(new Dimension(150, 40));
                        confirmBtn.setFocusable(false);
                        confirmBtn.addActionListener(this);

                        cancelBtn = new JButton("Cancel");
                        cancelBtn.setPreferredSize(new Dimension(150, 40));
                        cancelBtn.setFocusable(false);
                        cancelBtn.addActionListener(this);

                        JPanel confirmAndCancel = new JPanel();
                        confirmAndCancel.setLayout(new GridLayout(0, 2));
                        confirmAndCancel.setPreferredSize(new Dimension(170, 50));
                        confirmAndCancel.add(confirmBtn);
                        confirmAndCancel.add(cancelBtn);

                        JPanel changedFlow = new JPanel();
                        changedFlow.setLayout(new FlowLayout());
                        changedFlow.add(availabilityLabel);
                        changedFlow.add(doctorLabel);
                        changedFlow.add(confirmAndCancel);

                        //Adding the buttons to frame
                        consultInformation.add(changedFlow);
                        //refresh the frame
                        frame.revalidate();

                    }
                    //if doctor has not been changed by the system and the doctor booked by the user is available
                    //then the below code is executed
                    else {
                        //dispose this frame and create new endFrame by passing the patient,consultation and encryption key to the frame
                        frame.dispose();
                        new JFrame_endFrame(patient,consultation,encryption);
                    }
                }
                catch(NullPointerException exception){
                    JOptionPane.showMessageDialog(null,
                            "Retry with correct details entered",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }


            }
            //All details not filled
            else {
                JOptionPane.showMessageDialog(null,
                        "Personal Details not filled!!!!\nPlease fill all your details to continue",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        //if cost calculation button clicked
        else if (e.getSource() == costBtn){
            try {
                //Number of hours for consultation has to be entered
                if (Integer.parseInt(hour.getText()) > 0) {
                    JFrame_patientConsultation patientConsultation = new JFrame_patientConsultation();
                    //Calling the costBtn method in JFrame_patientConsultation class to get the cost
                    int consultCost = patientConsultation.CostBtn(patID.getText(), firstname.getText(), surname.getText(), dob.getText(), mobNo.getText());
                    //Setting the cost JFieldText
                    cost.setText(String.valueOf(consultCost * (Integer.parseInt(hour.getText()))));
                }
            }
            catch (NumberFormatException exception) {
                JOptionPane.showMessageDialog(null,
                        "Number not entered!!!!\nPlease enter the number of consultation hour",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //confirmBtn --> pass the patient details, consultation with changed doctor and encryption key to the endFrame
        else if (e.getSource() == confirmBtn){
            frame.dispose();
            new JFrame_endFrame(patient,consultation,encryption);
        }
        //CancelBtn --> delete the consultation and patient details and create a new JFrame_doctorListFrame
        //for the user to choose another doctor for consultation
        else if (e.getSource() == cancelBtn){
            JFrame_patientConsultation patientConsultation = new JFrame_patientConsultation();

            patientConsultation.deleteConsultation(patID.getText(),consultation);

            frame.dispose();

        }
    }

    //CLass to create table
    class selectedDocInformation extends AbstractTableModel{

        @Override
        public int getRowCount() {
            return docTableList.size();
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Object temp = null;
            if (columnIndex == 0){
                temp = docTableList.get(rowIndex).getMedLicenceNo();
            }
            else if (columnIndex == 1){
                temp = docTableList.get(rowIndex).getSpecial();
            }
            else if (columnIndex == 2){
                temp = docTableList.get(rowIndex).getName();
            }
            else if (columnIndex == 3){
                temp = docTableList.get(rowIndex).getSurname();
            }
            else if (columnIndex == 4){
                temp = docTableList.get(rowIndex).getDateOfBirth();
            }
            else if (columnIndex == 5){
                temp = docTableList.get(rowIndex).getMobileNo();
            }
            return temp;
        }

        @Override
        public String getColumnName(int col){
            return columnNames[col];
        }

        @Override
        public Class getColumnClass ( int col){
            if (col == 0){
                return Integer.class;
            }
            else if(col == 5){
                return Integer.class;
            }
            else {
                return String.class;
            }
        }
    }


}
